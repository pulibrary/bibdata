# This file contains utilities that are useful for maintaining Bibdata's Rust code

require 'open-uri'
require 'csv'

module BibdataRs
  Language = Struct.new(:english_name, :two_letter_code) do
    def self.from_csv_row(row)
      new(row[3].partition(';').first, row[2])
    end

    # Represent this Language struct as a rust Language
    def as_rust
      two_letter_code_as_option = two_letter_code ? "Some(\"#{two_letter_code}\")" : 'None'
      "Language { english_name: \"#{english_name}\", two_letter_code: #{two_letter_code_as_option} }"
    end

    # Represent this Language struct as a rust Option<Language>
    def as_rust_language_option
      two_letter_code_as_option = two_letter_code ? "Some(\"#{two_letter_code}\")" : 'None'
      "Some(#{as_rust})"
    end
  end

  Iso639_3Language = Struct.new(:language, :macrolanguage_code, :iso_639_2b_code) do
    # Represent this Language struct as a rust Option<Iso639_3Language>
    def as_rust_option
      "Some(Iso639_3Language { language: #{language.as_rust}, " \
        "macrolanguage_code: #{rust_option_string(macrolanguage_code)}, " \
        "iso_639_2b_code: #{rust_option_string(iso_639_2b_code)} })"
    end

    private

      def rust_option_string(string)
        string ? "Some(\"#{string}\")" : 'None'
      end
  end

  # This class is responsible for updating the Rust function that looks up language data by code
  class UpdateIso6392bLanguageData
    def initialize(file_handle)
      @file_handle = file_handle
    end

    def call
      file_handle.write iso_function
      file_handle.rewind
      # nosemgrep: ruby.lang.security.dangerous-subshell.dangerous-subshell
      `rustfmt #{file_handle.path}`
    end

    private

      attr_reader :file_handle

      def iso_function
        <<~END_ISO_639B_FUNCTION.chomp
          // This file is automatically generated.  Please do not edit it directly,
          // instead run `bundle exec rake languages:iso639_2b:refresh_list`
          use super::Language;
          pub fn from_iso_639b_code(code: &str) -> Option<Language> {
              match code {
                  #{languages.join(",\n        ")},
                  _ => None
              }
          }
        END_ISO_639B_FUNCTION
      end

      def languages
        download = URI.open('https://www.loc.gov/standards/iso639-2/ISO-639-2_8859-1.txt')
        CSV.new(download, col_sep: '|', encoding: 'iso-8859-1').filter_map do |row|
          next if row[0].include? '-' # skip ranges of language codes that are reserved for local use

          language_code = row[0].gsub(/[^a-z]/, '')
          "\"#{language_code}\" => #{Language.from_csv_row(row).as_rust_language_option}"
        end
      end
  end

  class UpdateIso6393LanguageData < UpdateIso6392bLanguageData
    private

      def iso_function
        <<~END_ISO_639_3_FUNCTION.chomp.force_encoding('UTF-8')
          // This file is automatically generated.  Please do not edit it directly,
            // instead run `bundle exec rake languages:iso639_3:refresh_list`
            // All data is from www.iso639-3.sil.org
            use super::{Iso639_3Language, Language};
            pub fn from_iso_639_3_code(code: &str) -> Option<Iso639_3Language> {

              match code {
                  #{languages.join(",\n        ")},
                  _ => None
              }
          }
        END_ISO_639_3_FUNCTION
      end

      def languages
        download = URI.open('https://iso639-3.sil.org/sites/iso639-3/files/downloads/iso-639-3.tab')
        CSV.new(download, col_sep: "\t", headers: true).filter_map do |row|
          language = Language.new(row['Ref_Name'], row['Part1'])
          iso639_3_language = Iso639_3Language.new(language, macrolanguage(row['Id']), row['Part2b'])
          "\"#{row['Id']}\" => #{iso639_3_language.as_rust_option}"
        end
      end

      def macrolanguage(code)
        mapping = macrolanguage_table.find { |macrolanguage_mapping| macrolanguage_mapping['I_Id'] == code }
        mapping['M_Id'] if mapping
      end

      def macrolanguage_table
        @macrolanguage_table ||= begin
          download = URI.open('https://iso639-3.sil.org/sites/iso639-3/files/downloads/iso-639-3-macrolanguages.tab')
          CSV.read(download, headers: true, col_sep: "\t")
        end
      end
  end
end
