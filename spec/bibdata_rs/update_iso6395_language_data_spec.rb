require 'spec_helper'
require_relative '../../lib/bibdata_rs/'

RSpec.describe BibdataRs::UpdateIso6395LanguageData do
  it 'generates a rust function based on data from the Library of Congress' do
    loc_data = <<~'END_LOC_DATA'.chomp
      URI	code	Label (English)	Label (French)
      http://id.loc.gov/vocabulary/iso639-5/aav	aav	Austro-Asiatic languages	austro-asiatiques, langues
      http://id.loc.gov/vocabulary/iso639-5/afa	afa	Afro-Asiatic languages	afro-asiatiques, langues
      http://id.loc.gov/vocabulary/iso639-5/alg	alg	Algonquian languages	algonquines, langues
      http://id.loc.gov/vocabulary/iso639-5/alv	alv	Atlantic-Congo languages	atlantique-congo, langues
      http://id.loc.gov/vocabulary/iso639-5/apa	apa	Apache languages	apaches, langues
    END_LOC_DATA
    file = Tempfile.new
    stub_request(:get, 'https://id.loc.gov/vocabulary/iso639-5.tsv')
      .and_return(body: loc_data)

    described_class.new(file).call

    expected_rust_code = <<~'END_EXPECTED_RUST_CODE'.chomp
      // This file is automatically generated.  Please do not edit it directly,
      // instead run `bundle exec rake languages:iso639_5:refresh_list`
      use super::Language;
      pub fn from_iso_639_5_code(code: &str) -> Option<Language> {
          match code {
              "aav" => Some(Language {
                  english_name: "Austro-Asiatic languages",
                  two_letter_code: None,
              }),
              "afa" => Some(Language {
                  english_name: "Afro-Asiatic languages",
                  two_letter_code: None,
              }),
              "alg" => Some(Language {
                  english_name: "Algonquian languages",
                  two_letter_code: None,
              }),
              "alv" => Some(Language {
                  english_name: "Atlantic-Congo languages",
                  two_letter_code: None,
              }),
              "apa" => Some(Language {
                  english_name: "Apache languages",
                  two_letter_code: None,
              }),
              _ => None,
          }
      }

    END_EXPECTED_RUST_CODE
    expect(file.read).to eq expected_rust_code
  end
end
