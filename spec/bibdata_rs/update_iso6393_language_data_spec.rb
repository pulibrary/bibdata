require 'spec_helper'
require_relative '../../lib/bibdata_rs/'

# rubocop:disable Layout/TrailingWhitespace -- the CSVs contain trailing whitespace
RSpec.describe BibdataRs::UpdateIso6393LanguageData do
  it 'generates a rust function based on data from SIL' do
    code_set_table = <<~'END_CODE_SET_TABLE'.chomp
      Id	Part2b	Part2t	Part1	Scope	Language_Type	Ref_Name	Comment
      aaa				I	L	Ghotuo	
      aab				I	L	Alumu-Tesu	
      aao				I	L	Algerian Saharan Arabic	
      aar	aar	aar	aa	I	L	Afar	
    END_CODE_SET_TABLE
    stub_request(:get, 'https://iso639-3.sil.org/sites/iso639-3/files/downloads/iso-639-3.tab')
      .and_return(body: code_set_table)

    macrolanguage_table = <<~'END_MACROLANGUAGE_TABLE'.chomp
      M_Id	I_Id	I_Status
      aka	fat	A
      aka	twi	A
      ara	aao	A
      ara	abh	A
      ara	abv	A	
    END_MACROLANGUAGE_TABLE
    stub_request(:get, 'https://iso639-3.sil.org/sites/iso639-3/files/downloads/iso-639-3-macrolanguages.tab')
      .and_return(body: macrolanguage_table)

    file = Tempfile.new
    described_class.new(file).call

    expected_rust_code = <<~'END_EXPECTED_RUST_CODE'.chomp
      // This file is automatically generated.  Please do not edit it directly,
      // instead run `bundle exec rake languages:iso639_3:refresh_list`
      // All data is from www.iso639-3.sil.org
      use super::{Iso639_3Language, Language};
      pub fn from_iso_639_3_code(code: &str) -> Option<Iso639_3Language> {
          match code {
              "aaa" => Some(Iso639_3Language {
                  language: Language {
                      english_name: "Ghotuo",
                      two_letter_code: None,
                  },
                  macrolanguage_code: None,
                  iso_639_2b_code: None,
              }),
              "aab" => Some(Iso639_3Language {
                  language: Language {
                      english_name: "Alumu-Tesu",
                      two_letter_code: None,
                  },
                  macrolanguage_code: None,
                  iso_639_2b_code: None,
              }),
              "aao" => Some(Iso639_3Language {
                  language: Language {
                      english_name: "Algerian Saharan Arabic",
                      two_letter_code: None,
                  },
                  macrolanguage_code: Some("ara"),
                  iso_639_2b_code: None,
              }),
              "aar" => Some(Iso639_3Language {
                  language: Language {
                      english_name: "Afar",
                      two_letter_code: Some("aa"),
                  },
                  macrolanguage_code: None,
                  iso_639_2b_code: Some("aar"),
              }),
              _ => None,
          }
      }

    END_EXPECTED_RUST_CODE
    expect(file.read).to eq expected_rust_code
  end
end
# rubocop:enable Layout/TrailingWhitespace
